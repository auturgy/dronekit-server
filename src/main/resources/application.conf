
# Scala-ActiveRecord config (based on run.mode - defaults to "dev")
dev {
  schema = "com.geeksville.dapi.model.Tables"
  
  # mysql
  driver = "com.mysql.jdbc.Driver"
  jdbcurl = "jdbc:mysql://localhost:3306/dapi"
  username = "dapi"
  password = "password" # FIXME - pick a better psw - and don't store it in this file

  # To use h2
  #driver = "org.h2.Driver"
  # To use a disposable in memory database
  #jdbcurl = "jdbc:h2:mem:test"
  # For now use the tiny H2 server with data in my homedir
  # jdbcurl = "jdbc:h2:~/droneapidb"
  
  autoCreate = true
  
  # Uncomment to implicitly wipe our DB on exit
  # autoDrop = true
}

# TEMPORARY info for migrating from droneshare - DELETE ME
db {
  user = "dbuser"
  dbname = "drone2"
  password = ""
  uri = "mongodb://localhost:27017"
}

threescale {
  apiKey = "b74a963039819a08e9ad1270a65ad8fa"
  serviceId = "2555417711192"
}

#
# Our akka config 
# See http://doc.akka.io/docs/akka/snapshot/general/configuration.html
#

akka {
  # Set to on to dump these settings at start
  log-config-on-start = off
  
  # Log level used by the configured loggers (see "event-handlers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: ERROR, WARNING, INFO, DEBUG
  # kevinh changed from DEBUG to prevent so much akka spam
  loglevel = INFO 
 
  # Log level for the very basic logger activated during AkkaApplication startup
  # Options: ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = INFO
  
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  
  jvm-exit-on-fatal-error = off
  
  actor {
    default-dispatcher {
      # Use bounded mailboxes
      mailbox-capacity = 50
      mailbox-push-timeout-time = 1000ms
    }

    debug {
      receive = on
      autoreceive = off
      lifecycle = on
      event-stream = on
      unhandled = on # Must be on or our EventStreamDebugger will not be informed
    }
  }
}
